<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_pigeon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_meta_agent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

Ordre = 0;//0 pas d'ordre en cours, 1 ordre en cours d'execution, sinon ne respecte pas l'ordre ou vient de prendre une décision par lui même
Type = 0;// 0 = Unité combattante, 1 messager
Etat = 1;// 1 Valide, 0 invalide, -1 mort
Camp = choose(-1,1);//indique dans quel camp on est si du meme signe alors sont alliés.
Chance = random(100);//Variable qui indique si l'agent va mourir ou non

for (i = 0; i &lt;= 7; i++)//Initialion liste percept 
    {
    PerceptAgent[i] = noone;
    }
    
Groupe = 1;//Indique avec qui il est 1 = personne, 2 ils sont en binôme, etc...

A = noone;//Autre Agent sélectionné pour d'eventuelle action
xx = x;//Pour eviter que l'agent se prenne en compte, lors des perceptions il sera deplacé loin et les calculs seront fait a partir de ses anciennes coordonnés
Action = IA_repos();
t = 0;//timer
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>IA_perception();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle = direction;//Le sprite est affiché selon la direction de l'agent
Chance = random(100);

if Ordre == 0 //Quand l'agent est livré a lui même mais toujours receptifs
    {
    if instance_exists(PerceptAgent[0])//normalement c'est l'agent le plus proche
        {
        if sign(PerceptAgent[0].Camp) != sign(Camp)//Si pas dans le même camp
            {
            if distance_to_object(PerceptAgent[0])&lt; 300
                {
                IA_attaque()
                }
            else
                {
                IA_deplacement();
                }
            }
        else
            {
            if ds_list_size(Regiment) &lt;= ds_list_size(PerceptAgent[0].Regiment)
                {
                IA_deplacement()
                }
            else
                {
                IA_repos();
                }
            }
        }
    else
        {
        IA_repos();
        }
    }
else
    {
    //Agebt entrain d'obeir à un ordre ou de fuir ou de désobeir ....
    
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_meta_agent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if Camp = other.Camp
&amp;&amp; Groupe == 1
    {
    if id &gt; other.id
    &amp;&amp; ds_list_size(Regiment) &gt;= ds_list_size(other.Regiment)
        {
        with(instance_create(x,y,obj_meta_agent_1))
            {
            //On place les variables de l'ancien agent dans le nouveau
            Camp = other.Camp;
            }
        instance_destroy()
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()
/*draw_text(x,y-5,string(Camp)+"  "+string(id))
draw_text(x,y-15,PerceptAgent[0])
draw_text(x,y-25,PerceptAgent[1])
draw_text(x,y-35,PerceptAgent[2])
draw_text(x,y-45,PerceptAgent[3])
draw_text(x,y-55,PerceptAgent[4])
draw_text(x,y-65,PerceptAgent[5])
draw_text(x,y-75,PerceptAgent[6])

if PerceptAgent[0] != noone &amp;&amp; instance_exists(PerceptAgent[0])
    draw_line(x,y,PerceptAgent[0].x,PerceptAgent[0].y);
if PerceptAgent[1] != noone &amp;&amp; instance_exists(PerceptAgent[1])
    draw_line(x,y,PerceptAgent[1].x,PerceptAgent[1].y);
if PerceptAgent[2] != noone &amp;&amp; instance_exists(PerceptAgent[2])
    draw_line(x,y,PerceptAgent[2].x,PerceptAgent[2].y);
if PerceptAgent[3] != noone &amp;&amp; instance_exists(PerceptAgent[3])
    draw_line(x,y,PerceptAgent[3].x,PerceptAgent[3].y);
if PerceptAgent[4] != noone &amp;&amp; instance_exists(PerceptAgent[4])
    draw_line(x,y,PerceptAgent[4].x,PerceptAgent[4].y);
if PerceptAgent[5] != noone &amp;&amp; instance_exists(PerceptAgent[5])
    draw_line(x,y,PerceptAgent[5].x,PerceptAgent[5].y);
if PerceptAgent[6] != noone &amp;&amp; instance_exists(PerceptAgent[6])
    draw_line(x,y,PerceptAgent[6].x,PerceptAgent[6].y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
